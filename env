# ~/.env: should be executed by the command interpreter for
#         login shells.

# load brew
if [ -e "/opt/homebrew/bin/brew" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/bin" ]; then
    export PATH="${HOME}/bin:${PATH}"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/.local/sbin" ]; then
    export PATH="${HOME}/.local/sbin:${PATH}"
fi
if [ -d "${HOME}/.local/bin" ]; then
    export PATH="${HOME}/.local/bin:${PATH}"
fi

# set PATH so it includes macport's private bin if it exists
if [ -d "/opt/local/bin" ]; then
    export PATH="/opt/local/sbin:${PATH}"
fi
if [ -d "/opt/local/sbin" ]; then
    export PATH="/opt/local/bin:${PATH}"
fi

# set XDG config directory and create it if it does not exist
export XDG_CONFIG_HOME="${HOME}/.config"
if [ ! -d "${XDG_CONFIG_HOME}" ]; then
    mkdir "${XDG_CONFIG_HOME}" >/dev/null 2>&1
fi

# add sublime text binaries to path if exist
if [ -d "/Applications/Sublime Text.app/Contents/SharedSupport/bin/" ]; then
    export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin/:${PATH}"
fi

#History setup
export HISTSIZE=100000
export SAVEHIST=20000

# enable colors
export CLICOLOR=1

# set colors used in ls command
export LSCOLORS=ExFxBxDxCxegedabagacad

# customize jq command colors
export JQ_COLORS="1;30:0;37:0;37:0;37:0;32:1;37:1;37"

# set up colors for man pages
export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
export LESS_TERMCAP_md=$(printf '\e[01;35m') # enter double-bright mode – bold, magenta
export LESS_TERMCAP_me=$(printf '\e[0m')     # turn off all appearance modes (mb, md, so, us)
export LESS_TERMCAP_se=$(printf '\e[0m')     # leave standout mode
export LESS_TERMCAP_so=$(printf '\e[01;33m') # enter standout mode – yellow
export LESS_TERMCAP_ue=$(printf '\e[0m')     # leave underline mode
export LESS_TERMCAP_us=$(printf '\e[04;36m') # enter underline mode – cyan

# set default editor
if command -v micro &>/dev/null; then
    export EDITOR="micro"
fi

# add python binaries to path
if [ -d "${HOME}/Library/Python/3.7/bin" ]; then
    export PATH="${HOME}/Library/Python/3.7/bin:${PATH}"
fi

# load pyenv
if [ -d "${HOME}/.pyenv" ]; then
    export PYENV_ROOT="${HOME}/.pyenv"
fi
# load pyenv
if [ -d "${HOME}/.pyenv/bin" ]; then
    export PATH="${HOME}/.pyenv/bin:${PATH}$"
fi
# initialize pyenv
if command -v pyenv &>/dev/null; then
    eval "$(pyenv init -)"
fi

# add postgres binaries to path
if [ -d "/opt/local/lib/postgresql13/bin/" ]; then
    export PATH="/opt/local/lib/postgresql13/bin/:${PATH}"
fi

# load cargo
if [ -e "${HOME}/.cargo/env" ]; then
    source "$HOME/.cargo/env"
fi

# set flutter version manager home directory
if command -v fvm &>/dev/null; then
    export FVM_CACHE_PATH="${HOME}/.fvm"
fi

# add flutter version manager default binaries
if [ -d "${FVM_CACHE_PATH}/default/bin" ]; then
    export PATH="${FVM_CACHE_PATH}/default/bin:${PATH}"
fi

# add postgres 15 binaries to PATH
if [ -d "/usr/local/opt/postgresql@15/bin" ]; then
	export PATH="/usr/local/opt/postgresql@15/bin:${PATH}"
fi

# add postgres 16 binaries to PATH
if [ -d "/usr/local/opt/postgresql@16/bin" ]; then
	export PATH="/usr/local/opt/postgresql@16/bin:${PATH}"
elif [ -d "/opt/homebrew/opt/postgresql@16/bin/" ]; then
    export PATH="/opt/homebrew/opt/postgresql@16/bin/:${PATH}"
fi

# add visual studio code binaries to PATH
if [ -d "/Applications/Visual Studio Code.app/Contents/Resources/app/bin" ]; then
    export PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin:${PATH}"
fi

# add dart third-party binaries to PATH
if [ -d "$HOME/.pub-cache/bin" ]; then
    export PATH="${HOME}/.pub-cache/bin:${PATH}"
fi

# add nvm binaries to path
if command -v nvm &>/dev/null; then
    export NVM_DIR="$HOME/.nvm"
    if [ ! -d "${NVM_DIR}" ]; then
        mkdir "${NVM_DIR}"
    fi

    if [ -s "${NVM_DIR}/nvm.sh" ]; then
        . "${NVM_DIR}/nvm.sh"
    fi

    if [ -s "${NVM_DIR}/bash_completion" ]; then
        . "${NVM_DIR}/bash_completion"
    fi
fi

# set .NET environment and add binaries
if [ -d "$HOME/.dotnet" ]; then
	export DOTNET_ROOT=$HOME/.dotnet 
    export PATH="${PATH}:${DOTNET_ROOT}"
fi

# load ruby executables if exist
if [ -d "$HOMEBREW_REPOSITORY/opt/ruby/bin" ]; then
    export PATH="$HOMEBREW_REPOSITORY/opt/ruby/bin:$PATH"
fi

# check android home directory
if [ -d "$HOME/Library/Android/sdk" ]; then
    export ANDROID_HOME="$HOME/Library/Android/sdk"
    # add android binaries to path
    if [ -d "$ANDROID_HOME/platform-tools" ]; then
        export PATH="$ANDROID_HOME/platform-tools:$PATH"
    fi
    if [ -d "$ANDROID_HOME/tools" ]; then
        export PATH="$ANDROID_HOME/tools:$PATH"
    fi
    if [ -d "$ANDROID_HOME/tools/bin" ]; then
        export PATH="$ANDROID_HOME/tools/bin:$PATH"
    fi
    if [ -d "$ANDROID_HOME/emulator" ]; then
        export PATH="$ANDROID_HOME/emulator:$PATH"
    fi
fi

# check for JetBrains Toolbox scripts
if [ -d "$HOME/Library/Application Support/JetBrains/Toolbox/scripts" ]; then
    export PATH="$HOME/Library/Application Support/JetBrains/Toolbox/scripts:$PATH"
fi

# configure jenv
# if [ -e "/opt/homebrew/bin/jenv" ]; then
#     export PATH="$HOME/.jenv/bin:$PATH"
#     eval "$(jenv init -)"
# fi

if [ -d "$HOME/.pub-cache/bin" ]; then
    export PATH="$PATH":"$HOME/.pub-cache/bin"
fi

export SENTRY_SKIP_DSYM_UPLOAD=false
