# ~/.env: should be executed by the command interpreter for
#         login shells.

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/bin" ]; then
    export PATH="${HOME}/bin:${PATH}"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/.local/sbin" ]; then
    export PATH="${HOME}/.local/sbin:${PATH}"
fi
if [ -d "${HOME}/.local/bin" ]; then
    export PATH="${HOME}/.local/bin:${PATH}"
fi

# set PATH so it includes macport's private bin if it exists
if [ -d "/opt/local/bin" ]; then
    export PATH="/opt/local/sbin:${PATH}"
fi
if [ -d "/opt/local/sbin" ]; then
    export PATH="/opt/local/bin:${PATH}"
fi

# set XDG config directory and create it if it does not exist
export XDG_CONFIG_HOME="${HOME}/.config"
if [ ! -d "${XDG_CONFIG_HOME}" ]; then
    mkdir "${XDG_CONFIG_HOME}" >/dev/null 2>&1
fi

#History setup
export HISTSIZE=100000
export SAVEHIST=20000

# enable colors
export CLICOLOR=1

# set colors used in ls command
export LSCOLORS=ExFxBxDxCxegedabagacad

# set up colors for man pages
export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
export LESS_TERMCAP_md=$(printf '\e[01;35m') # enter double-bright mode – bold, magenta
export LESS_TERMCAP_me=$(printf '\e[0m')     # turn off all appearance modes (mb, md, so, us)
export LESS_TERMCAP_se=$(printf '\e[0m')     # leave standout mode
export LESS_TERMCAP_so=$(printf '\e[01;33m') # enter standout mode – yellow
export LESS_TERMCAP_ue=$(printf '\e[0m')     # leave underline mode
export LESS_TERMCAP_us=$(printf '\e[04;36m') # enter underline mode – cyan

# set default editor
if command -v micro &>/dev/null; then
    export EDITOR="micro"
fi

# set JAVA_HOME variable
if command -v /usr/libexec/java_home &>/dev/null; then
    export JAVA_HOME="$(/usr/libexec/java_home)"
fi

# add python binaries to path
if [ -d "${HOME}/Library/Python/3.7/bin" ]; then
    export PATH="${HOME}/Library/Python/3.7/bin:${PATH}"
fi

# load pyenv
if [ -d "${HOME}/.pyenv/bin" ]; then
    export PATH="${HOME}/.pyenv/bin:${PATH}$"
fi
# initialize pyenv
if command -v pyenv &>/dev/null; then
    eval "$(pyenv init --path)"
    eval "$(pyenv virtualenv-init -)"
fi

# add postgres binaries to path
if [ -d "/opt/local/lib/postgresql13/bin/" ]; then
    export PATH="/opt/local/lib/postgresql13/bin/:${PATH}"
fi

# set node version manager home directory
if [ -d "$XDG_CONFIG_HOME/nvm" ] && [ -s "${XDG_CONFIG_HOME}/nvm/nvm.sh" ]; then
    export NVM_DIR="$XDG_CONFIG_HOME/nvm"
    source "${NVM_DIR}/nvm.sh"

    if [ -s "$NVM_DIR/bash_completion" ]; then
        source "$NVM_DIR/bash_completion"
    fi
elif [ -d "$HOME/.nvm" ] && [ -s "${HOME}/.nvm/nvm.sh" ]; then
    export NVM_DIR="$HOME/.nvm"
    source "${NVM_DIR}/nvm.sh"

    if [ -s "$NVM_DIR/bash_completion" ]; then
        source "$NVM_DIR/bash_completion"
    fi
fi

# load cargo
if [ -e "${HOME}/.cargo/env" ]; then
    source "$HOME/.cargo/env"
fi

# set flutter version manager home directory
if command -v fvm &>/dev/null; then
    export FVM_HOME="${HOME}/.fvm"
fi

# add flutter version manager default binaries
if [ -d "${FVM_HOME}/default/bin" ]; then
    export PATH="${FVM_HOME}/default/bin:${PATH}"
fi

if [ -d "/usr/local/opt/postgresql@15/bin" ]; then
	export PATH="/usr/local/opt/postgresql@15/bin:${PATH}"
fi

# add AdnroidStudio executable path
androidStudioToolboxBase=${HOME}/Library/Application\ Support/JetBrains/Toolbox/apps/AndroidStudio/ch-0
if [ -d "${androidStudioToolboxBase}" ]; then
    androidStudioToolboxVersion=$(ls ${androidStudioToolboxBase})
    export CAPACITOR_ANDROID_STUDIO_PATH=${androidStudioToolboxBase}/${androidStudioToolboxVersion}/Android\ Studio.app/
fi

# TODO: REMOVE THIS IN FUTURE (handle nvm versions with macports)
# add nvm binaries to path
if command -v nvm &>/dev/null; then

    export NVM_DIR="$HOME/.nvm"
    if [ ! -d "${HOME}/.nvm" ]; then
        mkdir "${NVM_DIR}"
    fi

    if [ -s "${NVM_DIR}/nvm.sh" ]; then
        . "${NVM_DIR}/nvm.sh"
    fi

    if [ -s "${NVM_DIR}/bash_completion" ]; then
        . "${NVM_DIR}/bash_completion"
    fi

fi

# customize jq command colors
JQ_COLORS="1;30:0;37:0;37:0;37:0;32:1;37:1;37"
